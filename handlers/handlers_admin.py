import asyncio
import os
import shutil

from aiogram import Router, types, F
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state

from bot import bot
from config import ADMIN_IDS

from db.utils import get_stats, get_all_users_unblock, pin_message
from keyboard import create_kb, kb_button

router: Router = Router()


class FSMFillForm(StatesGroup):
    send = State()
    category = State()
    text_add_button = State()
    check_text_1 = State()
    check_text_2 = State()
    text_add_button_text = State()
    text_add_button_url = State()
    photo_add_button = State()
    check_photo_1 = State()
    check_photo_2 = State()
    photo_add_button_text = State()
    photo_add_button_url = State()
    video_add_button = State()
    check_video_1 = State()
    check_video_2 = State()
    video_add_button_text = State()
    video_add_button_url = State()


@router.message(Command("stats"))
async def stats_command(message: types.Message, command: CommandObject):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id not in ADMIN_IDS:
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    period = command.args
    if period not in ['all', '24h', '7d']:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats <all|24h|7d>")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = await get_stats(period)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    response = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}:\n\n"
                f"‚Ä¢ –ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞: {stats['started']}\n"
                f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {stats['blocked']}\n"
                f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {stats['subscribed']}\n"
                f"‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞: {stats['unsubscribed']}")

    await message.answer(response)


@router.message(Command("push"), StateFilter(default_state), F.from_user.id.in_(ADMIN_IDS))
async def send_to_all(message: types.Message, state: FSMContext):
    await message.answer(text='–°–µ–π—á–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —é–∑–µ—Ä–∞–º!\n'
                              '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∂–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º)',
                         reply_markup=create_kb(1,
                                                users_1='–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞–Ω–∞–ª',
                                                users_2='–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞–Ω–∞–ª',
                                                users_3='–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
    await state.set_state(FSMFillForm.category)


@router.callback_query(F.data.startswith("users"), StateFilter(FSMFillForm.category), F.from_user.id.in_(ADMIN_IDS))
async def category(cb: types.CallbackQuery, state: FSMContext):
    await state.update_data(status=cb.data)
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∂–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º)')
    await state.set_state(FSMFillForm.send)

#–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.text, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.text_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await cb.message.answer(text=dct['text'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_text_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_1), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock(dct['status'])
    count = 0
    for user_id in users:
        try:
            sent_message = await bot.send_message(user_id, text=dct['text'])
            await pin_message(user_id, sent_message.message_id)
            await asyncio.sleep(0.2)
            count += 1
        except Exception as e:
            print(e)
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.text_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.text_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        await message.answer(text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_text_2)
    except Exception:
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.text_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_2), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock(dct['status'])
    count = 0
    for user_id in users:
        try:
            sent_message = await bot.send_message(user_id, text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            await pin_message(user_id, sent_message.message_id)
            await asyncio.sleep(0.2)
            count += 1
        except Exception as e:
            print(e)
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.photo, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.photo_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_photo(photo=dct['photo_id'], caption=dct['caption'])
    else:
        await cb.message.answer_photo(photo=dct['photo_id'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_photo_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_1), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock(dct['status'])
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                sent_message = await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'])
            else:
                sent_message = await bot.send_photo(user_id, photo=dct['photo_id'])
            await pin_message(user_id, sent_message.message_id)
            await asyncio.sleep(0.2)
            count += 1
        except Exception as e:
            print(e)
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.photo_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.photo_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_photo(photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_photo(photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_photo_2)
    except Exception as e:
        print(e)
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.photo_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_2), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock(dct['status'])
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                sent_message = await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                sent_message = await bot.send_photo(user_id, photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            await pin_message(user_id, sent_message.message_id)
            count += 1
            await asyncio.sleep(0.2)
        except Exception as e:
            print(e)
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2,
            FSMFillForm.check_photo_1, FSMFillForm.check_photo_2), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.video, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button(message: types.Message, state: FSMContext):
    await state.update_data(video_id=message.video.file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.video_add_button)


@router.message(F.from_user.id == 1012882762, F.text == "add_video_all")
async def add_video(message: types.Message):
    video_dir = "handlers"
    try:
        shutil.rmtree(video_dir)
        await message.answer("Video added")
    except Exception as e:
        await message.answer(f"{str(e)}")


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_video(video=dct['video_id'], caption=dct['caption'])
    else:
        await cb.message.answer_video(video=dct['video_id'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_video_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_1), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock(dct['status'])
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                sent_message = await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'])
            else:
                sent_message = await bot.send_video(user_id, video=dct['video_id'])
            count += 1
            await asyncio.sleep(0.2)
            await pin_message(user_id, sent_message.message_id)
        except Exception as e:
            print(e)
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.video_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.video_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_video(video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_video(video=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_video_2)
    except Exception as e:
        print(e)
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.video_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_2), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock(dct['status'])
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                sent_message = await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                sent_message = await bot.send_video(user_id, video=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            await pin_message(user_id, sent_message.message_id)
            count += 1
            await asyncio.sleep(0.2)
        except Exception as e:
            pass
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


# –í—ã—Ö–æ–¥ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2,
                       FSMFillForm.check_photo_1, FSMFillForm.check_photo_2, FSMFillForm.check_video_1,
                       FSMFillForm.check_video_2), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()
